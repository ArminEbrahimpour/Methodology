{
	"nodes":[
		{"id":"cd4fe80d8ce478eb","type":"text","text":"# Nuclei for js \n\n\tnuclei -l js.txt -t ~/nuclei-templates/http/exposures -o potential-secrets.txt","x":-3408,"y":-11127,"width":760,"height":120},
		{"id":"9e39896ca7ac4828","type":"text","text":"# finding js files \n\n\t cat domains.txt | waybackurls | grep '.js' | httpx -mc 200 >> js.txt","x":-3368,"y":-11387,"width":680,"height":140},
		{"id":"5ef1e2729edc790e","type":"text","text":"# check for tools \n\nhttps://github.com/edoardottt/cariddi","x":-4500,"y":-11902,"width":250,"height":635},
		{"id":"64b941c60cfccc21","type":"text","text":"# to get different status codes :\n\tcat live_tech_no_color.txt | grep ' \\[403\\] ' --color=auto >> status_403.txt\n\n```\ncat live.txt | grep '\\[200\\]' | awk '{print $1}'\n```\n## make it for 200 and 302 and ...\n","x":-4055,"y":-11237,"width":560,"height":317},
		{"id":"f964c569499f3a6a","type":"text","text":"# Third Party Hosting \n\n### Take a look at the company’s third-party hosting footprint. For example,look for the organization’s S3 buckets. S3, which stands for Simple StorageService, is Amazon’s online storage product. Organizations can pay to storeresources in buckets to serve in their web applications, or they can use S3 buckets as a backup or storage location. If an organization uses Amazon S3,its S3 buckets can contain hidden endpoints, logs, credentials, user infor-mation, source code, and other information that might be useful to you.How do you find an organization’s buckets? One way is through Google dorking, as mentioned earlier. Most buckets use the URL format BUCKET.s3.amazonaws.com or s3.amazonaws.com/BUCKET, so the following searchterms are likely to find results:\nsite:s3.amazonaws.com COMPANY_NAME\n\nsite:amazonaws.com COMPANY_NAME\n\n### If the company uses custom URLs for its S3 buckets, try more flexible search terms instead. Companies often still place keywords like aws and s3 in their custom bucket URLs, so try these searches:\n\namazonaws s3 COMPANY_NAME\namazonaws bucket COMPANY_NAME\namazonaws COMPANY_NAME\ns3 COMPANY_NAME\n#### nother way of finding buckets is to search a company’s public GitHubrepositories for S3 URLs. Try searching these repositories for the term s3. We’lltalk about using GitHub for recon in “GitHub Recon” on the following page.GrayhatWarfare (https://buckets.grayhatwarfare.com/) is an online searchengine you can use to find publicly exposed S3 buckets (Figure 5-7). It allowsyou to search for a bucket by using a keyword. Supply keywords related toyour target, such as the application, project, or organization name, to find relevant buckets. \n#### Finally, you can try to brute-force buckets by using keywords. Lazys3(https://github.com/nahamsec/lazys3/) is a tool that helps you do this. Itrelies on a wordlist to guess buckets that are permutations of common bucket names. Another good tool is Bucket Stream (https://github.com/eth0izzle/bucket-stream/), which parses certificates belonging to an organization andfinds S3 buckets based on permutations of the domain names found on thecertificates. Bucket Stream also automatically checks whether the bucket isaccessible, so it saves you time.\n#### Once you’ve found a couple of buckets that belong to the target organi-\n##### zation, use the AWS command line tool to see if you can access one. Installthe tool by using the following command:\npip install awscli\n##### Then configure it to work with AWS by following Amazon’s documenta-tion at https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html. Now you should be able to access buckets directly from your terminal via the aws s3 command. Try listing the contents of the bucket you found:\naws s3 ls s3://BUCKET_NAME/\n##### If this works, see if you can read the contents of any interesting files by copying files to your local machine:\naws s3 cp s3://BUCKET_NAME/FILE_NAME/path/to/local/directory\n###### Gather any useful information leaked via the bucket and use it for future exploitation! If the organization reveals information such as active API keys or personal information, you should report this right away. Exposed S3 buck-ets alone are often considered a vulnerability. You can also try to upload new files to the bucket or delete files from it. If you can mess with its contents, you might be able to tamper with the web application’s operations or corrupt company data. For example, this command will copy your local file named TEST_FILE into the target’s S3 bucket: \naws s3 cp TEST_FILE s3://BUCKET_NAME/\n##### And this command will remove the TEST_FILE that you just uploaded:\naws s3 rm s3://BUCKET_NAME/TEST_FILE\n###### These commands are a harmless way to prove that you have write access to a bucket without actually tampering with the target company’s files. Always upload and remove your own test files. Don’t risk deleting important company resources during your testing unless you’re willing to entertain a costly lawsuit.\n\n\n","x":-1908,"y":-14447,"width":560,"height":3180},
		{"id":"3d66c65402b90c56","type":"text","text":"# Github <font color=\"red\">Recon</font>\n\n## look for hardcoded secrets such as API keys, encryption keys, and database passwords. Search the organization’s repositories for terms like key, secret, and password to locate hardcoded user credentials that you can use to access internal systems. After you’ve found leaked credentials, you can use KeyHacks (https://github.com/streaak/keyhacks/) to check if the credentials are valid and learn how to use them to access the target’s services.\n\n## Tools like Gitrob and TruffleHog can automate the GitHub recon pro- cess. Gitrob (https://github.com/michenriksen/gitrob/) locates potentially sensitive files pushed to public repositories on GitHub. TruffleHog (https://github.com/trufflesecurity/truffleHog/) specializes in finding secrets in repositories by conducting regex searches and scanning for high-entropy strings.","x":-1128,"y":-15127,"width":440,"height":1040},
		{"id":"2ae97110a52368e3","type":"text","text":"# [<font color=\"red\">CVE</font>'s Search for them on the CVE database](https://cve.mitre.org/cve/search_cve_list.html)\n\n","x":-1128,"y":-14037,"width":820,"height":70},
		{"id":"4f81bce4d66c9e40","type":"text","text":"# <font color=\"red\">tech</font> stack <font color=\"red\">fingerprinting</font>\n\n### The simplest way of fingerprinting an application is to engage with the application directly. First, run Nmap on a machine with the -sV flag on to enable version detection on the port scan.\n$ nmap scanme.nmap.org -sV\n## Next, in Burp, send an HTTP request to the server to check the HTTP headers used to gain insight into the tech stack. A server might leak many pieces of information useful for fingerprinting its technology:\nServer: Apache/2.0.6 (Ubuntu)\nX-Powered-By: PHP/5.0.1\nX-Generator: Drupal 8\nX-Drupal-Dynamic-Cache: UNCACHEABLE\nSet-Cookie: PHPSESSID=abcde;\n##### HTTP headers like Server and X-Powered-By are good indicators of technologies. The Server header often reveals the software versions running on the server. X-Powered-By reveals the server or scripting language used.Also, certain headers are used only by specific technologies. For example,only Drupal uses X-Generator and X-Drupal-Dynamic-Cache. Technology-specific cookies such as PHPSESSID are also clues; if a server sends back a cookie named PHPSESSID, it’s probably developed using PHP.\n\n## <font color=\"red\">wappalyzer, builtwith, stackshare</font>(stackshare is a online platform that allows developers to share the tech they use)\n\n# <font color=\"red\">Retire.js</font> is a tool that detects outdated JavaScript libraries and Node.js packages.","x":-1128,"y":-13847,"width":440,"height":1460},
		{"id":"e053461f8d333244","type":"text","text":"# Directory BruteForcin\n\n## I use <font color=\"red\">ffuf</font> for it ","x":-1928,"y":-16447,"width":380,"height":120},
		{"id":"8399f189129bea5f","type":"text","text":"# Spidering\n\n## another way of discovering directories is web spidering \n## tool the book recommand is zaps spider \n## but i found <font color=\"red\">katana</font> my favorite \n## Hakrawler seems fine too","x":-1928,"y":-16227,"width":380,"height":400},
		{"id":"23a56b0557f9e6e5","type":"text","text":"# use Logger++ for filtering the requests inside a scope \nhttps://github.com/bnematzadeh/LoggerPlusPlus-API-Filters","x":-1898,"y":-15607,"width":320,"height":280},
		{"id":"bc7757522aabc15f","type":"text","text":"# Reverse Whois \n## for finding more assets\n### using sides like viewdns.info","x":-3048,"y":-14547,"width":350,"height":180},
		{"id":"5ef79ec8c9413b94","type":"text","text":"# Using IP Address \n\n## with nslookup command you can find the ip address of a site and using reverse IP lookup you can find more sites hosted on that IP and then using whois searching for IP  \n\n$ nslookup facebook.com\nServer: 192.168.0.1\nAddress: 192.168.0.1#53\nNon-authoritative answer:\nName: facebook.com\nAddress: 157.240.2.35\n\n$ whois 157.240.2.35\nNetRange: 157.240.0.0 - 157.240.255.255\nCIDR: 157.240.0.0/16\nNetName: THEFA-3\nNetHandle: NET-157-240-0-0-1\nParent: NET157 (NET-157-0-0-0-0)\nNetType: Direct Assignment\nOriginAS:\nOrganization: Facebook, Inc. (THEFA-3)\nRegDate: 2015-05-14\nUpdated: 2015-05-14\nRef: https://rdap.arin.net/registry/ip/157.240.0.0\nOrgName: Facebook, Inc.\nOrgId: THEFA-3\nAddress: 1601 Willow Rd.\nCity: Menlo Park\nStateProv: CA\n\n## Another way of finding IP addresses in scope is by looking at ASN's \n\n$ whois -h whois.cymru.com 157.240.2.20\nAS | IP | AS Name\n32934 | 157.240.2.20 | FACEBOOK, US\n$ whois -h whois.cymru.com 157.240.2.27\nAS | IP | AS Name\n32934 | 157.240.2.27 | FACEBOOK, US\n$ whois -h whois.cymru.com 157.240.2.35\nAS | IP | AS Name\n32934 | 157.240.2.35 | FACEBOOK, US\n\n## The -h flag in the whois command sets the WHOIS server to retrieve information from, and whois.cymru.com is a database that translates IPs to ASNs.","x":-3048,"y":-14307,"width":350,"height":1820},
		{"id":"497a694f2e423e3c","type":"text","text":"# Certificate Parsing\n\n## Another way of finding hosts is to take advantage of the secure socket layer certificate. use online databases like crt.sh , censys and certspotter to find certificates for a domain.\n","x":-3048,"y":-12427,"width":350,"height":380},
		{"id":"c5f38e86451278b3","type":"text","text":"# Now Check for web vulnerability methodology\nhttps://book.hacktricks.xyz/pentesting-web/web-vulnerabilities-methodology","x":-14080,"y":-5826,"width":264,"height":297},
		{"id":"350f25ee0525c239","type":"text","text":"# Hop-by-Hop headers\n\n### [link of an script for testing](https://gist.github.com/ndavison/298d11b3a77b97c908d63a345d3c624d) \n\n","x":-11560,"y":-6400,"width":340,"height":200},
		{"id":"aa9bc323f062e7b3","type":"text","text":"# Proxies \n","x":-12960,"y":-6330,"width":250,"height":60},
		{"id":"4dcd57b5b9845150","type":"text","text":"# Cache Poisoning and cache deception","x":-12960,"y":-5920,"width":250,"height":160},
		{"id":"3a1de0661cdec286","type":"text","text":"# server diagnosed ","x":-9377,"y":-9957,"width":329,"height":73},
		{"id":"ad55a66826b1e1f1","type":"text","text":"# check for any waf\n\nhttps://github.com/EnableSecurity/wafw00f\nhttps://github.com/Ekultek/WhatWaf.git\nhttps://nmap.org/nsedoc/scripts/http-waf-detect.html","x":-8362,"y":-9957,"width":514,"height":154},
		{"id":"281bdb76645a74a6","type":"text","text":"## some well known tricks for bug bounty\nhttps://book.hacktricks.xyz/network-services-pentesting/pentesting-web","x":-7729,"y":-10476,"width":361,"height":193},
		{"id":"be2acbb8af2e8739","type":"text","text":"# found 401,403 pages try to bypass it with ..; or ; etc (spend time on it)","x":-7368,"y":-9954,"width":499,"height":190},
		{"id":"b05958fff303dd8a","type":"text","text":"# tops on bypassing 403 or 401\n\n## 1. by adding headers:\nX-Originating-IP, X-Remote-IP, X-Client-IP, X-Forwarded-For , etc...\n#### sometimes companies whitelist the IP for those who can access sensitive data. These headers take IP address as a value and let you access the resources\n\n## 2. whith unicode chars: \n#### try inserting unicode characters to bypass the defenses . try e.g %= ca , %=sa and many other ... so if /cadmin is blocked try accessing %dmin. search for unicode hacking on youtube\n## 3. by overssiding , overwriting url with headers:\n#### if GET /admin gives you 403 forbidden , try to GET /accessible(any accessible endpoint ) and add any of these HTTP headers:\n\nX-Original-URL: /admin\nX-Override-URL: /admin\nX-Rewrite-URL: /admin\n\n## 4. try different payloads:\nif GET /admin gives you 403 forbidden try accessing :\n/accessible/..;/admin\n/.;/admin\n/admin;/\n/admin/-\n/./admin/./\n/admin?parama\n/%2e/admin\n/admin#\n## 5. Method switching :\n#### change the method to others\n## 6. via IP,Vhost:\n#### access the site via it's ip or vhost to get the forbidden content\n\n# 7. fuzzing :\n#### by bruteforcing files or directories further\n","x":-7368,"y":-9563,"width":499,"height":1480},
		{"id":"aca99a38e89e74ae","type":"text","text":"# What to check on each file found\n\n- [**Broken link checker**](https://github.com/stevenvachon/broken-link-checker): Find broken links inside HTMLs that may be prone to takeovers\n    \n- **File Backups**: Once you have found all the files, look for backups of all the executable files (\"_.php_\", \"_.aspx_\"...). Common variations for naming a backup are: _file.ext~, #file.ext#, ~file.ext, file.ext.bak, file.ext.tmp, file.ext.old, file.bak, file.tmp and file.old._ You can also use the tool [**bfac**](https://github.com/mazen160/bfac) **or** [**backup-gen**](https://github.com/Nishantbhagat57/backup-gen)**.**\n    \n- **Discover new parameters**: You can use tools like [**Arjun**](https://github.com/s0md3v/Arjun)**,** [**parameth**](https://github.com/maK-/parameth)**,** [**x8**](https://github.com/sh1yo/x8) **and** [**Param Miner**](https://github.com/PortSwigger/param-miner) **to discover hidden parameters. If you can, you could try to search** hidden parameters on each executable web file.\n    \n    - _Arjun all default wordlists:_ [https://github.com/s0md3v/Arjun/tree/master/arjun/db](https://github.com/s0md3v/Arjun/tree/master/arjun/db)\n        \n    - _Param-miner “params” :_ [https://github.com/PortSwigger/param-miner/blob/master/resources/params](https://github.com/PortSwigger/param-miner/blob/master/resources/params)\n        \n    - _Assetnote “parameters_top_1m”:_ [https://wordlists.assetnote.io/](https://wordlists.assetnote.io/)\n        \n    - _nullenc0de “params.txt”:_ [https://gist.github.com/nullenc0de/9cb36260207924f8e1787279a05eb773](https://gist.github.com/nullenc0de/9cb36260207924f8e1787279a05eb773)\n        \n    \n- **Comments:** Check the comments of all the files, you can find **credentials** or **hidden functionality**.\n    \n    - If you are playing **CTF**, a \"common\" trick is to **hide** **information** inside comments at the **right** of the **page** (using **hundreds** of **spaces** so you don't see the data if you open the source code with the browser). Other possibility is to use **several new lines** and **hide information** in a comment at the **bottom** of the web page.\n        \n    \n- **API keys**: If you **find any API key** there is guide that indicates how to use API keys of different platforms: [**keyhacks**](https://github.com/streaak/keyhacks)**,** [**zile**](https://github.com/xyele/zile.git)**,** [**truffleHog**](https://github.com/trufflesecurity/truffleHog)**,** [**SecretFinder**](https://github.com/m4ll0k/SecretFinder)**,** [**RegHex**](https://github.com/l4yton/RegHex)/)**,** [**DumpsterDive**](https://github.com/securing/DumpsterDiver)**,** [**EarlyBird**](https://github.com/americanexpress/earlybird)\n    \n    - Google API keys: If you find any API key looking like **AIza**SyA-qLheq6xjDiEIRisP_ujUseYLQCHUjik you can use the project [**gmapapiscanner**](https://github.com/ozguralp/gmapsapiscanner) to check which apis the key can access.\n        \n    \n- **S3 Buckets**: While spidering look if any **subdomain** or any **link** is related with some **S3 bucket**. In that case, [**check** the **permissions** of the bucket](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/buckets).","x":-3263,"y":-9183,"width":475,"height":1343},
		{"id":"9888c88bf4694e48","type":"text","text":"# Special findings\n\n**While** performing the **spidering** and **brute-forcing** you could find **interesting** **things** that you have to **notice**.\n\n**Interesting files**\n\n- Look for **links** to other files inside the **CSS** files.\n    \n- [If you find a _**.git**_ file some information can be extracted](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/git)\n    \n- If you find a _**.env**_ information such as api keys, dbs passwords and other information can be found.\n    \n- If you find **API endpoints** you [should also test them](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/web-api-pentesting). These aren't files, but will probably \"look like\" them.\n    \n- **JS files**: In the spidering section several tools that can extract path from JS files were mentioned. Also, It would be interesting to **monitor each JS file found**, as in some ocations, a change may indicate that a potential vulnerability was introduced in the code. You could use for example [**JSMon**](https://github.com/robre/jsmon)**.**\n    \n    - You should also check discovered JS files with [**RetireJS**](https://github.com/retirejs/retire.js/) or [**JSHole**](https://github.com/callforpapers-source/jshole) to find if it's vulnerable.\n        \n    - **Javascript Deobfuscator and Unpacker:** [https://lelinhtinh.github.io/de4js/](https://lelinhtinh.github.io/de4js/), [https://www.dcode.fr/javascript-unobfuscator](https://www.dcode.fr/javascript-unobfuscator)\n        \n    - **Javascript Beautifier:** [http://jsbeautifier.org/](https://beautifier.io/), [http://jsnice.org/](http://jsnice.org/)\n        \n    - **JsFuck deobfuscation** (javascript with chars:\"[]!+\" [https://ooze.ninja/javascript/poisonjs/](https://ooze.ninja/javascript/poisonjs/))\n        \n    - [**TrainFuck**](https://github.com/taco-c/trainfuck)**:** `+72.+29.+7..+3.-67.-12.+55.+24.+3.-6.-8.-67.-23.`\n        \n    - In several occasions you will need to **understand regular expressions** used, this will be useful: [https://regex101.com/](https://regex101.com/)\n        \n    \n- You could also **monitor the files were forms were detected**, as a change in the parameter or the apearance f a new form may indicate a potential new vulnerable functionality.","x":-2638,"y":-9183,"width":530,"height":1023},
		{"id":"822d73359b42f0c3","type":"text","text":"# Recon Websites:\n\nrecon\n\n[ViewDNS.info - Your one source for DNS related tools!](https://viewdns.info/?search=digikala.com)\n\n[WHOIS API | WHOIS Lookup API | Domain WHOIS API](https://www.whoxy.com/)\n\n[DNSDumpster.com - dns recon and research, find and lookup dns records](https://dnsdumpster.com/)\n\n[Internet Archive: Digital Library of Free & Borrowable Books, Movies, Music & Wayback Machine](https://archive.org/)\n\n[Netcraft | Leader in Phishing Detection, Cybercrime Disruption and Website Takedown](https://www.netcraft.com/)\n\n[BGPView - BGP Toolkit and BGP ASN Routing Lookup Tool](https://bgpview.io/)\n\n[crt.sh | Certificate Search](https://crt.sh/)\n\n[Censys Search](https://search.censys.io/)\n\n[Web Check](https://web-check.xyz/check/https%3A%2F%2Fweb.gap.im)\n\n[Public Buckets by GrayhatWarfare](https://buckets.grayhatwarfare.com/)\n\n[Threat Intelligence | External Attack Surface Management | Flare](https://flare.io/)\n\n[Network Tools by YouGetSignal.com](https://www.yougetsignal.com/)\n\n[AbuseIPDB - IP address abuse reports - Making the Internet safer, one IP at a time](https://www.abuseipdb.com/)\n\n[Subdomain Finder - C99.nl](http://subdomainfinder.c99.nl/)\n\n[Access Denied](https://builtwith.com/)\n\n[Just a moment...](https://synapsint.com/)\n\n[Find email addresses in seconds • Hunter (Email Hunter)](https://hunter.io/)\n\n[FullHunt | Expose Your Attack Surface](https://fullhunt.io/)\n\n[Bug Bounty Helper](https://dorks.faisalahmed.me/)\n\n[SecurityTrails: Data Security, Threat Hunting, and Attack Surface Management Solutions for Security Teams](https://securitytrails.com/)\n\n[Just a moment...](https://osint.sh/)\n\n[Crunchbase: Discover innovative companies and the people behind them](https://www.crunchbase.com/)\n\n[Hurricane Electric BGP Toolkit](https://bgp.he.net/)\n\n[Home • Directory Lister](http://kaeferjaeger.gay/)\n\n[Simple Recon Methodology. Different methodology to Recon targets | by Eslam Akl | InfoSec Write-ups](https://infosecwriteups.com/simple-recon-methodology-920f5c5936d4)\n\n[DeHashed — #FreeThePassword](https://www.dehashed.com/)\n\n[CIRT.net | Suspicion Breeds Confidence](https://cirt.net/)\n\n[OSINT Framework](https://osintframework.com/)\n\n[Assetnote Wordlists](https://wordlists.assetnote.io/)\n\n[Rapid7 Research - Project Sonar](https://www.rapid7.com/research/project-sonar/)\n\n[BeVigil - World's first & only security search engine for mobile apps](https://bevigil.com/osint/api-keys)\n\n[edoardottt/awesome-hacker-search-engines: A curated list of awesome search engines useful during Penetration testing, Vulnerability assessments, Red/Blue Team operations, Bug Bounty and more](https://github.com/edoardottt/awesome-hacker-search-engines)","x":-6800,"y":-15200,"width":551,"height":1690},
		{"id":"aa725dce9339b51f","type":"text","text":"# ASN discovery\n### for finding ASnumber use:\n\n\thttps://bgp.he.net/\n\t\n### or use publicly available bgp view API:\n\t\n\tcurl -s https://api.bgpview.io/search?query_term=paypal | jq\n\n### Alternatively Nmap script `target-asn` can also be utilized for extracting IP ranges upon an ASN:\n\n\tnmap --script targets-asn --script-args targets-asn.asn=26444\n\t","x":-3061,"y":-18041,"width":350,"height":681},
		{"id":"8de0b860308f246b","type":"text","text":"# MultiThreading\n\n#### use the `interlace` tool for doing multiThread :\n\nhttps://github.com/codingo/Interlace\n\n## command :\n```\ninterlace -tL ip.txt -c \"curl -s '\nhttps://rapiddns.io/sameip/_target_?full=1#result' | grep\n'target=' -B1 | egrep -v '(--|) ' | rev | cut -c 6- | rev\n| cut -c 5- | sort -u >> output.txt\" -threads 2 --silent\n--no-color --no-bar\n```\n","x":-3680,"y":-17191,"width":280,"height":677},
		{"id":"8a82842c575cab7b","type":"text","text":"# Reverse IP lookup\n\nquerying an IP address to identify domains hosted on the same IP address.\n\n## tools :\n\tYouGetSignal, ViewDNS.info, rappiddns.io, securitytrails\n#### Alternatively we can use curl to extract domains associated with paypal:\n\n\tcurl -s 'https://rapiddns.io/sameip/64.4.250.0/24?full\n=1#result' | grep 'target=\" ' -B1 | egrep -v '(--|) ' |\nrev | cut -c 6- | rev | cut -c 5- | sort -u\n\n","x":-3061,"y":-17191,"width":350,"height":680},
		{"id":"e6492365862d97ee","type":"text","text":"## Port Scanning \n\n#### use masscan for port scanning \n#### command :\n```\nsudo masscan --open-only 10.22.144.0/24 -p1-65535,U:1-65535\n--rate=10000 --http-user-agent \"Mozilla/5.0 (Windows NT\n10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0\"\n-oL \"output.txt\"\n```\n\n#### or use naabo or nmap for portscanning ","x":-3061,"y":-16447,"width":350,"height":520},
		{"id":"322be645ddefdad0","type":"text","text":"# Detecting Http services by Httpx\n\n```\ncat output.txt | grep tcp | awk ' {print $4,\":\",$3}' |\ntr -d ' ' | httpx -title -sc -cl\n```\n\n#### note: the output.txt is the output file from masscan port scanner\n","x":-3061,"y":-15847,"width":350,"height":363},
		{"id":"4654099419fe1553","type":"text","text":"# scanning for Service Versions\n\n##### after successfully identified the webServers on each ip using httpx now we can perform a service version scan .\n\n\n```\nNmap -sC -sV 10.22.144.147 -T4\n```\n\nTip: Conducting a detailed scan with Nmap can be time-consuming, espe-\ncially during bug bounty engagements. A more effective approach is to first\nuse Masscan for identifying open ports and then conduct a targeted Nmap\nservice version scan on these ports. This method avoids scanning all ports,\nthus saving time. To facilitate this, script Masscan_to_nmap.py efficiently\nconnects Masscan’s output to Nmap, streamlining the process [https://gist.\ngithub.com/mosesrenegade/1f09c90376d81630e233c37d2e7d3b3d].\n","x":-3061,"y":-15407,"width":350,"height":760},
		{"id":"b0d8a465113ebf8f","type":"text","text":"# Subdomain enumeration\n## after finding as many domains as possible it is time to locate as many subdomains as you can\n## tools like Sublist3r , subBrute, Amass and gobuster can enumerate subdomains automatically \n\n## for wordlist you can use seclist or commonspeak2 for combining multiple wordlist you can use sort command\nsort -u wordlist1.txt wordlist2.txt\n\n## Gobuster is a tool for brute-forcing to discover subdomains, directories, and files on target web servers. Its DNS mode is used for subdomain brute-forcing.\ngobuster dns -d target_domain -w wordlist\n\n## Once you’ve found a good number of subdomains, you can discover more by identifying patterns. For example, if you find two subdomains of example.com named 1.example.com and 3.example.com, you can guess that 2.example.com is probably also a valid subdomain. A good tool for automating this process is Altdns (https://github.com/infosec-au/altdns/), which discovers subdomains with names that are permutations of other subdomain names.\n## go for subdomains of subdomains and follow your knowledge about the company's technology\n\n### <font color=\"red\">Note:</font> you should config the needed api keys in the configuration files of the subfinder in order to use it's full deepness\n\n### you can use amass for subdomain discovery too \n### for simple subdomain enumeration you could use :\n\tamass enum -d target.com\n## <font color=\"red\">DNS</font> techniques\n\n#### using dnsx to extract subdomains from an ASN (using PTR query):\n\n```\necho AS17012 | dnsx -silent -resp-only -ptr\n```\n\n\n### <font color=\"red\">recursive enumeration</font> :\n\tsubfinder -dL file\n## <font color=\"red\">Sub bruteforce</font>: \n\n#### for sub brute we need two factor 1- wordlist 2- dns resolver\n#### you could do both same time in shuffledns tool like :\n\tshuffledns -d target.com -w wordlist.txt -r resolver.txt\n\n## <font color=\"red\">DNSvalidator</font>:\nfor validating dns resolvers you could use this tool.\n\nTo use DNSValidator, we will feed it with a wordlist of external resolv-\ners available at public-dns.info [https://public-dns.info/nameservers.txt]. We\nwill feed it with a list of known external resolvers using a list available at\n“public-dns.info”, the output will be saved as “resolvers.txt”, which will act\nas an input for subdomain enumeration tools.\n```\ndnsvalidator -tL https://public-dns.info/nameservers.\ntxt -threads 100 -o resolvers.txt\n```\n\n## resolver\nhttps://github.com/trickest/resolvers/blob/main/resolvers.txt\n\n## <font color=\"red\">subdomain dns brute force</font>:\n```\npuredns bruteforce ~/w/SecLists/Discovery/DNS/dns-Jhaddix.txt $domain -r ~/w/purednsResolvers/resolvers.txt >> puredns2.txt\n```\n\n- [ ] https://infosecwriteups.com/master-subdomain-hunting-art-of-finding-hidden-assets-3351b3c8467a\n## <font color=\"red\">shuffledns</font>\n\n```\nshuffledns -d paypal.com -w subdomains-top1million-5000.\ntxt -r resolvers.txt\n\n```\n\n```\nshuffledns -d hackerone.com -w wordlist.txt -r resolvers.txt -mode bruteforce\n```\n\n## <font color=\"red\">subdomain enumeration using content security policy </font>\nContent Security Policy (CSP) header allows administrators to specify which\ndomains and subdomains are allowed to load content such as scripts, frame\nsources, image sources, and so forth on their website.\nThe following curl command can be used to extract domains from the CSP\nheader. To filter and obtain only the subdomains of “api-s.sandbox.paypal.\ncom/pk/home”, the grep command is used:\n```\ncurl -I -s https://api-s.sandbox.paypal.com | grep -iE 'content-security-policy|CSP' |tr \" \" \"\\n\" | grep \"\\.\"\n| tr -d \";\" | sed 's/\\*\\.//g' | sort -u\n```\n## <font color=\"red\">subdomain enumeration using favicon hashes</font>\n\nfavicon serach https://favicon-hash.kmsec.uk/\n\nWhen subdomains of a website use the same favicon, each favicon will\nhave the same hash value\n\n#### step1 downloading the favicon.ico\n#### step 2 Generating MurmurHash\n```\ncat favicon.ico | base64 | python3 -c \"import mmh3,\nsys; print(mmh3.hash(sys.stdin.buffer.read()))\"\n```\n#### step 3  Using shodan search \n```\nHttp.favicon.hash:309020573\n```\n\n# <font color=\"red\">passive Enum</font>\n\n## abusedIPDB\n```\n        #!/bin/bash\n        abusedb(){\n        cookie_header=\"Cookie: cookie_consent_functional=allow; cookie_consent_analytical=allow; _ga_MBHS9QPB71=GS1.1.1691614703.7.1.1691615497.0.0.0; _ga=GA1.2.1806797756.1691428565; _ga_NL1PG6T2D0=GS1.1.1691614703.7.1.1691615497.0.0.0; cf_clearance=lA4pSoazPal288SKbFnm7aB7cfXl0Wi6VFAyM.DTrAQ-1691615208-0-1-c18904d3.6f4824ec.96885b33-250.2.1691615126; _gid=GA1.2.928789359.1691428567; _ga_J0NQ3TGFDJ=GS1.2.1691614704.5.1.1691615327.36.0.0; XSRF-TOKEN=eyJpdiI6InpVUmpGSHZKZHJaRllBMWJ\n```\n\n## Rapiddns\n\n```\ncurl -s https://rapiddns.io/subdomain/paypal.com?full=1\n| grep -Eo '[a-zA-Z0–9.-]+\\.[a-zA-Z]{2,}' | sort -u\n```\n\n# some tools\nFollowing are some of the popular tools that can be utilized for passive\nenumeration:\nSecurityTrails API: https://api.securitytrails.com\nAlienVault OTX API: https://otx.alienvault.com/api\nURLScan: https://urlscan.io/\nHackerTarget: https://hackertarget.com/\nPentest-Tools: https://pentest-tools.com/\nDNSdumpster: https://dnsdumpster.com/\ncrt.sh: https://crt.sh\n\n## subdomain enum using github\n\ntool : https://github.com/gwen001/github-search/blob/master/github-subdomains.py\n\ncommand\n```\npython3 github-subdomains.py -t API-KEY -d paypal.com -e\n```\n\nNote: The command requires API Key as an input, which can be obtained\nfrom individual GitHub account.\n\n## sub enumeration using subject alternative name (san):\nWhen a website uses an SSL/TLS (secure sockets layer/transport layer secu-\nrity) certificate, it often includes a field called “SAN” (Subject Alternative\nName). This field contains a list of all domains and subdomains for which\nthe certificate is valid. Therefore, by inspecting this field, it is possible to dis-\ncover subdomains that might not be visible through traditional DNS look-\nups. The following command uses the openssl command line to query api.\npaypal.com for its subdomains.\n\ncommand :\n\n```\ntrue | openssl s_client -connect api.paypal.com:443 2>/\ndev/null | openssl x509 -noout -text | grep \"DNS\" | tr\n',' '\\n' | cut -d \":\" -f2\n```\n\n## using web archive for sub enum\n\n```\necho example.com | gau --subs | unfurl -u domains | sort -u\n```\n\n## subdomin discovery  private tool\n\n```\nhttps://columbus.elmasy.com/api/lookup/ford.com\n```\n\n## subenum tool\n\nhttps://github.com/bing0o/SubEnum/\n\n## gitlab subdomains\n\nhttps://github.com/gwen001/gitlab-subdomains\n\n## google dork for finding subdomains  (site:crunchbase.com \"acquired by Walmart\")\n\n## subdomain enum 1 line chains:\n\n```\n## Juicy Subdomains\nsubfinder -d target.com -silent | dnsx -silent | cut -d ' ' -f1  | grep --color 'api\\|dev\\|stg\\|test\\|admin\\|demo\\|stage\\|pre\\|vpn'\n\n## from BufferOver.run\ncurl -s https://dns.bufferover.run/dns?q=.target.com | jq -r .FDNS_A[] | cut -d',' -f2 | sort -u \n\n## from Riddler.io\n\ncurl -s \"https://riddler.io/search/exportcsv?q=pld:target.com\" | grep -Po \"(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" | sort -u \n\n## from RedHunt Labs Recon API\ncurl --request GET --url 'https://reconapi.redhuntlabs.com/community/v1/domains/subdomains?domain=<target.com>&page_size=1000' --header 'X-BLOBR-KEY: API_KEY' | jq '.subdomains[]' -r\n\n## from nmap\nnmap --script hostmap-crtsh.nse target.com\n\n## from CertSpotter\ncurl -s \"https://api.certspotter.com/v1/issuances?domain=target.com&include_subdomains=true&expand=dns_names\" | jq .[].dns_names | grep -Po \"(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" | sort -u\n\n## from Archive\ncurl -s \"http://web.archive.org/cdx/search/cdx?url=*.target.com/*&output=text&fl=original&collapse=urlkey\" | sed -e 's_https*://__' -e \"s/\\/.*//\" | sort -u\n\n## from JLDC\ncurl -s \"https://jldc.me/anubis/subdomains/target.com\" | grep -Po \"((http|https):\\/\\/)?(([\\w.-]*)\\.([\\w]*)\\.([A-z]))\\w+\" | sort -u\n\n## from crt.sh\ncurl -s \"https://crt.sh/?q=%25.target.com&output=json\" | jq -r '.[].name_value' | sed 's/\\*\\.//g' | sort -u\n\n## from ThreatMiner\ncurl -s \"https://api.threatminer.org/v2/domain.php?q=target.com&rt=5\" | jq -r '.results[]' |grep -o \"\\w.*target.com\" | sort -u\n\n## from Anubis\ncurl -s \"https://jldc.me/anubis/subdomains/target.com\" | jq -r '.' | grep -o \"\\w.*target.com\"\n\n## from ThreatCrowd\ncurl -s \"https://www.threatcrowd.org/searchApi/v2/domain/report/?domain=target.com\" | jq -r '.subdomains' | grep -o \"\\w.*target.com\"\n\n## from HackerTarget\ncurl -s \"https://api.hackertarget.com/hostsearch/?q=target.com\"\n\n## from AlienVault\ncurl -s \"https://otx.alienvault.com/api/v1/indicators/domain/tesla.com/url_list?limit=100&page=1\" | grep -o '\"hostname\": *\"[^\"]*' | sed 's/\"hostname\": \"//' | sort -u\n\n## from Censys\ncensys subdomains target.com\n\n## from subdomain center\ncurl \"https://api.subdomain.center/?domain=target.com\" | jq -r '.[]' | sort -u\n```\n\n","x":-2560,"y":-21920,"width":460,"height":10173},
		{"id":"1b3888f15c9ca06f","type":"text","text":"# Service Enumeration\n\n## enumerate services hosted on the machines you've found. since services often run on default ports , a good way is portScanning either active or passive.\n\n## For active scanning you can use Nmap or Masscan \n\n## For Passive Scanning you can use shodan , Censys or Project sonar","x":-2500,"y":-11627,"width":320,"height":620},
		{"id":"acf71aee5650f74a","type":"text","text":"# can use httpx for finding tech and title of live sub/domains\n## Note : first use dnsx then httpx for faster results\n\tcat scope.txt | sort -u | ~/go/bin/httpx -nc -cl -sc -title -tech-detect\n\n### or\n```\ncat subs.txt | httpx -sc -nc -title -ip -tech-detect -cl -o httpx.txt\n\n```","x":-4043,"y":-11820,"width":535,"height":522},
		{"id":"1d6a9de5c8e58fab","type":"text","text":"# selecting one domain then :\n```\t\necho \"example.com\" | gau  --threads 10 --o endpoints.txt\n```\n\n\n### to remove duplication of similar nature we can use uro:\n```\ncat gau.txt | sort -u | uro\n```\n## or \n\techo \"example.com\" | katana -jc >> endpoints.txt\n\n```\ncat katana.results | grep \"\\.js\" >> js.files  ## use httpx for validate the urls\n```\n\n## crawling using katana\n```\nkatana -u https://target.com -jc -o katana.txt\n```\n\n## gospider \n\n```\ngospider -s https://example.com\n```\n#### can be used to simultaneously crawl multiple sites at once:\n\n```\ngospider -S domains.txt -o gospider-output -c 10\n```\n##### or you can specify cookie using `--cookie` flag\n\n# using WebArchive \n\n```\nhttps://web.archive.org/cdx/search/cdx?url=digikala.com/*&output=text&fl=original&collapse=urlkey\n```\n\n## waymore \n\n```\nwaymore -i \"https://studyiniran.saorg.ir\" -mode U\n```\n\n\n## gau\n```\necho example.com | gau --threads 10 --o output.txt\n```","x":-1802,"y":-10500,"width":908,"height":1400},
		{"id":"3471cc29f0a4e7ea","type":"text","text":"# Do google dork","x":-4960,"y":-10016,"width":322,"height":90},
		{"id":"deabcfe579a25509","type":"text","text":"# Do github Dork","x":-3989,"y":-9957,"width":427,"height":120},
		{"id":"8cf840fde6c71503","type":"text","text":"## check js files for secrets , tokens , api keys , ...\n\n## JavaScript files can contain useful information such as subdomains, directories, endpoints, files, and API routes, as well as sensitive data like usernames,passwords, or API keys, hence they are worth exploring\n\n## <font color=\"red\">Extracting  subdomains from js files</font>\n\nConsidering the size and complexity of JavaScript files, it would be beneficial to use automation for extracting the relevant data. For example, the fol-l wing command uses curl to access “latmconf.js” file; it then uses regular expressions to match subdomains. Next, the duplicates are removed from results using “sort -u”, ensuring each unique URL is listed only once.Finally another grep command filters these results to include only those URLs containing “paypal.com”.\n\n```\ncurl -s www.paypalobjects.com/pa/mi/paypal/latmconf.js\n| grep -Po \"((http|https):\\/\\/)?(([\\w.-]*)\\.([\\w]*)\\.\n([A-z]))\\w+\" | sort -u | grep paypal.com\n```\n### <font color=\"red\">Extracting Endpoints using javaScript files</font>\n\n```\ncurl -s www.paypalobjects.com/pa/mi/paypal/latmconf.js\n| grep -oh \"\\\"\\/[a-zA-Z0-9_/?=&]*\\\"\" | sed -e 's/^\"//'\n-e 's/\"$//' | sort -u\n```\n\n### <font color=\"red\">Enhancing code readability for js files</font>\nIn the real world, JavaScript files are often minified to reduce their size for better web performance. This process strips out unnecessary characters such as whitespace and comments, making the code more difficult to read.\nConsequently, working with regular expressions to match patterns in a minified code can be extremely challenging.One such tool is JSbeautify [https://github.com/beautify-web/js-beautify]. It can reformat poorly formatted JavaScript, unminify the code, and partially deobfuscate the JavaScript. The following command will take “example.js” as an input and return formatted results in “beautify-example.js”.\n```\njs-beautify example.js > beautify-example.js\n```\n\n# <font color=\"red\"> Automatically Analyzing all js files</font>\n\n## **Collecting js files**:\n\nFor collecting the JavaScript files we can use the previously collected data of web archives and crawlers. We will use the following command:\n```\ngrep \"\\.js\" paypal.txt | sort -u | httpx -silent -mc 200\n-o paypal-js.txt\n```\n## **extracting endpoints from js files**:\n\nAfter identifying the JavaScript files, the next step involves discovering\nendpoints and their parameters within these files. This process can be\nautomated using a Python tool called “LinkFinder”. It utilizes “jsbeau-\ntifier” and a comprehensive set of regular expressions for matching\nendpoints. To automate this process, we will feed multiple JavaScript files to Linkfinder and extract relevant details. For this purpose, we will use the following bash script:\n\n```\nwhile read url; do. /linkfinder.py -i $url -o cli >>\npaypal-endpoinsts.txt;done <.. /paypal-js.txt\n```\n\nThe command uses a loop that reads each line from the “paypal-js.txt” file, which contains URLs extracted in a previous step. It then executes “Linkfinder.py” for each URL and outputs the results to “paypal-endpoints.txt”\n\n## **Extracting Sensitive Data from js files**:\nTo identify and retrieve this data, we can utilize the “Secret Finder”\n[https://github.com/m4ll0k/SecretFinder] tool. This tool is capable of\nextracting various sensitive details, including API keys, access tokens, authorizations, JWT tokens, usernames, and passwords.\n\n```\npython3 SecretFinder.py -i https://example.com/1.js -o cli\n```\n\nfor automating the secret finder using bash :\n```bash\nfilename=\"myfile.txt\"\nwhile IFS= read -r line\ndo\n  echo \"$line\"\n  # Perform operations on $line here\ndone < \"$filename\"\n```\n\n## using truffleHog :\n- [ ] https://github.com/trufflesecurity/trufflehog\n","x":-1908,"y":-8938,"width":628,"height":2718},
		{"id":"6b80fa0a75b5fb6e","type":"text","text":"### 1- manually submit several bad login attempts for an account you control , monitoring the error messages you recieve.\n### 2- After about 10 failed logins if the application has not returned a message about account lockout, attempt to log in correctly, if this succeeds, there is probably no account lockout policy\n\n### 3- if account is locked out , try repeating the attempts on a different account if the app issued any cookies , use each cookie for only a single login attempt and obtain a new cookie for each subsequent login attempt.\n\n### 4- if account is locked out see submiting  a valid password causes any difference in the application's behavior compared to an invalid password. if so you can contimue apsseord-guessing attack even if the account is locked out .\n\n### 5- if you do not control any accounts try to enumerate a valid user name and make several bad logins using this monitor for any error messages about account lock.\n\n### 6- to mount a brute0force attack first identify a difference in the application's behaviour in response to successful and failed  logins . so you can use it \n\n### 7- obtain a list of enumerated or common usernames and a list of common password. use any information abtained about password quality rules to tailor the password list .\n\n### 8- if you are targetting several usenames at once it is usually preferable to perform this kingd of brute-force attack in abreadth-first rather than depth-first manner.(this has two benefits 1- you discover accounts with common pass more quickly 2- you are less likely to trigger any account lockout defenses because there is a time delay between subbessive attempts using each individual account)\n","x":9340,"y":-6100,"width":520,"height":1480},
		{"id":"bdbecd6fdb5af2c7","type":"text","text":"### attempt to discover any rules in regarding password quality\n### 1- Review the website for any description of the rules\n### 2- if self-registratino os possible , attempt to register several accounts with different kind of weak passwords to discover what rules are in place \n### 3- if changing password is possible in single account try to change it to various weak values","x":8880,"y":-6030,"width":375,"height":530},
		{"id":"a367e3e324333acd","type":"text","text":"###  1-check if it disclose the username \n### 2- chekc the differences between two account login attempt packets one successive and on  failed \n","x":8940,"y":-4680,"width":340,"height":260},
		{"id":"25e9393d25040efd","type":"text","text":"### 1- Carry out a successful login while monitoring all traffic in both directions bet client and server\n\n### 2- if any sensitive information is transmitted over an unencrypted channel this is, of course vulnerable to interception.\n\n### 3- if no cases of actual credentials being transmitted insecurely are identified pay close attention to any data that appears to be encoded or obfuscated and try to reverse engineer the obfuscation algorithm\n\n### 4- if credentials are submitted using HTTPS but the login form is loaded using HTTP the application is vulnerable to a man-in-the-middle attack which may be used to capture credentials.","x":9410,"y":-4550,"width":490,"height":650},
		{"id":"d882c3959c05c833","type":"text","text":"### 1- identify this functionality either directly or by fuzzing\n\n### 2- check all (BruteForce - Verbose Error Message - Transmission of credentials ) that explained above \n### 3- if the mechanism uses a challenge determine whether users can set or select their own challenge and response. if so use a list of enumerated or common usernames to harvest a list of challenges and review this for any that appear easily guessable\n\n### 4- if the mechanism uses a password hint do the same exercise to harvest a list of password hints and target any that are easily guessable\n\n### 5- if the application generates an e-mail containing a recovery URL in response to a forgotten password request, obtain a number of these URLs, and attempt to identify any patterns that may enable you to predict the URLs issued to other users. Employ the same techniques as are relevant to analyzing session tokens for predictability .","x":8833,"y":-4120,"width":555,"height":780},
		{"id":"acf6c7c79fbfd867","type":"text","text":"### 1- Active remember me functionality and determine whether the functionality indeed does fully remember the user or whether it remembers only his username and still requires him to enter a password on subsequent visits. the second is less likely to expose any security flaw\n\n### 2- chekc all p;ersistent cookies that are set and also any data that is persisted in other local storage or Flash local shared objects .\n\n### 3- Even where stord data appears to be heavily encoded or obfuscated, review this closely, compare the resultes of remembering several very similar usernames and / or passwords to identify any opportunities to reverse-eng the original data \n\n### 4- try to modify the contents of the persistent cookie to convince the application that another user has saved his details on your computer (or on that user computer one scenario is in my head is like i know the person and i want to use his/her account on the website but it requires username and password but by convincing the server that she wants to activate remeber me functon on his/her system at next all i need is to ask for his system)","x":9440,"y":-3770,"width":580,"height":860},
		{"id":"6258375a3a053e7c","type":"text","text":"# httpx","x":8900,"y":-6100,"width":250,"height":60},
		{"id":"e42c499a9cb1372e","type":"text","text":"## cat all-subs.txt | httpx -silent >> live-subs.txt","x":9240,"y":-6100,"width":660,"height":60},
		{"id":"6b363b761a9a70fe","type":"text","text":"# Subfinder","x":7800,"y":-6100,"width":205,"height":60},
		{"id":"e72cd61c14e34a40","type":"text","text":"## Bad password ","x":8100,"y":-5530,"width":260,"height":60,"color":"5"},
		{"id":"c84d03ebcb09b908","type":"text","text":"# Login Brute Force ","x":8100,"y":-5100,"width":300,"height":80,"color":"1"},
		{"id":"cee15b252134ec38","type":"text","text":"# Verbose Error Message","x":8100,"y":-4520,"width":280,"height":100,"color":"1"},
		{"id":"53b4e1fb8ce1ebc1","type":"text","text":"# vulnerable Transmission of credentials","x":8100,"y":-4180,"width":280,"height":80,"color":"1"},
		{"id":"e9cf98dec3489df4","type":"text","text":"# Forgotten Password  Functionallity ","x":8100,"y":-3675,"width":280,"height":150,"color":"1"},
		{"id":"2a743bae1900ba58","type":"text","text":"# Remember ME","x":8100,"y":-3210,"width":280,"height":50,"color":"1"},
		{"id":"ee7facb9826b5185","type":"text","text":"# TXT Records","x":8605,"y":-7000,"width":250,"height":60},
		{"id":"5749c3ca3d7dfa57","type":"text","text":"# ASN","x":8655,"y":-6800,"width":250,"height":60},
		{"id":"13e9d0526061b658","type":"text","text":"# IP history","x":8250,"y":-6730,"width":250,"height":60},
		{"id":"e5d8bb6b8908eddd","type":"text","text":"# Reverse IP look up","x":8220,"y":-6590,"width":250,"height":110},
		{"id":"ae63b4746fadd54f","type":"text","text":"## subfinder -d ${domain} >> all-subs.txt ","x":8140,"y":-6100,"width":580,"height":60},
		{"id":"481ca1dd4d262f59","type":"text","text":"# dns info","x":8135,"y":-7030,"width":250,"height":60},
		{"id":"a2ee21cdf35aba0f","type":"text","text":"# bgp.he.net","x":7800,"y":-6890,"width":250,"height":60},
		{"id":"4639dac037dc7df9","type":"text","text":"# IP info","x":8135,"y":-6860,"width":250,"height":60},
		{"id":"5ba2826c6199690d","type":"text","text":"# viewdns.info","x":7800,"y":-6650,"width":250,"height":60},
		{"id":"7c6ea01e6fb7358c","type":"text","text":"# whoxy.com","x":7800,"y":-6380,"width":250,"height":60},
		{"id":"acaec07463c2af85","type":"text","text":"getting who is for site","x":8085,"y":-6380,"width":250,"height":60},
		{"id":"a1a9e7314e06f098","type":"text","text":"## banner","x":8193,"y":-7680,"width":250,"height":60},
		{"id":"11beddbe8b36a70a","type":"text","text":"# ASN","x":8215,"y":-7440,"width":250,"height":60},
		{"id":"7888eaa42431879b","type":"text","text":"## synapsint.com ","x":7800,"y":-7340,"width":250,"height":60},
		{"id":"3b19da9a7655768f","type":"text","text":"#  subs","x":8215,"y":-7310,"width":250,"height":60},
		{"id":"de57ecc3ada6f03d","type":"text","text":"# same IP domains","x":8215,"y":-7180,"width":250,"height":80},
		{"id":"398c7069fbccf8e9","type":"text","text":"# Incomplete Validation of Credentials","x":8100,"y":-2900,"width":250,"height":120,"color":"5"},
		{"id":"beb8f3679303e91c","type":"text","text":"# Nonunique Usernames","x":8100,"y":-2580,"width":250,"height":80,"color":"1"},
		{"id":"85f59185c71c411d","type":"text","text":"### some apps truncate passwords and therefore validate only the first n characters. some apps strip unusual characters(sometimes on the pretext of performing input validation) before checking passwords.\n\n### 1- Using an account you control, attempt to log in with variations on your own password: removing the last character changing the case of a character and removing any special typographical characters. if any of these attempts is succesful continue exprimenting to try to undrestand what validation is actually occuring","x":8860,"y":-3080,"width":528,"height":500},
		{"id":"4df59f52b9c00c20","type":"text","text":"### 1- obtain a new account. if you are not required to set all credentials during registration , determine the means by which the application distributes credentials to new users.\n### 2- If an account activation URL is used, try to register several new accounts in close succession, and identify any sequence in the URLs you receive.If a pattern can be determined, try to predict the activation URLs sent to recent and forthcoming users, and attempt to use these URLs to take ownership of their accounts.\n\n### 3- Try to reuse a single activation URL multiple times, and see if the application allows this. If not, try locking out the target account before reusing the URL, and see if it now works.\n","x":8860,"y":-2420,"width":528,"height":620},
		{"id":"2fe8ca2ab9e8ff1c","type":"text","text":"### some apps that support self-registration allow users to specify their own username and do not enforce a requirement that usernames be uniqe.\n\n## SCENARIO\n### One user who shares a username with another user , may also happen to select the same password as that user , either during registration or in a subsequent password change. in this eventuality the application either have identical credentials. In the fist instance the app's behavior effectively discloses to one user the credentials of the other user. In the second instance subsequent logins by one of the users result in access to the other user's account. an attacker may exploit this behavior to carry out a successful brute-force attack by registering a specific usernamemultiple times with deffenerent passwords while monitoring for the differential response that indicates that an account wiht that username and password alreadu exists. ","x":9460,"y":-2800,"width":580,"height":700},
		{"id":"eb64526fa088a9f6","type":"text","text":"### 1- if self-registration is possible attempt to register the same username twice with differenct password.\n\n### 2- if the app blocks the second registration attempt, you can exploit this behavior to enumerate existing usernames even if this is not possible on the main login  page or elsewher e. Make multiple registration attempts onthe main login page or else where, Make multiple registration attempts with alist of common usernames to identify the already registered names that the app blocks\n\n### 3- if the registration of duplicate usernames succeeds, try to register the same usename twice with teh same password and determine the app's behaviour:\n###          a : if an error message results, you can exploit this behavior to user enumeration\n###        b: if no error message results, log in using the credentials you specified and see what happens.","x":10300,"y":-2860,"width":540,"height":760},
		{"id":"0d1b4f5e92284c7f","type":"text","text":"# Insecure distribution of Credentials","x":8100,"y":-2380,"width":265,"height":140,"color":"1"},
		{"id":"9d0f31a1a1532db1","type":"text","text":"### 1- perform a complete login and capture every single packets and review it and record it every request and every response \n### 2- repeat the login process multiple times and modify pieces of data submitted in unexpected ways. for example for each request parameter or COOKIE sent by the client do the following :\n### a- submit an empty string as a value\n### b- Remove the name/value pair altogether  \n### c. Submit very long and very short values.\n\n### d. Submit strings instead of numbers and vice versa.\n### e. Submit the same item multiple times, with the same and different values.\n","x":9460,"y":-2000,"width":600,"height":560},
		{"id":"0986e7ab2dd06397","type":"text","text":"### perform a complete valid login using an account you control. and record all the data into your burp\n\n### 2- Identify each distinct stage of the login and the data that is collected at each state. ad determine  whether any single piece of information is collected more than once or is ever transmitted back to the client and resubmitted via a hiddent form filed, cookie or preset URL parameter \n### 3- Repeat the login process numerous times with various malformed requests\n### a- Try perform the login steps in a different sequence.\n\n### b- Try proceding directly to any givven stage and contimuing from there \n\n### c- Try skipping each stage and continuing wiht the next.\n\n### 4- if any data is submitting more than once try submitting  a different value  at different stages and see wheter the login is stilll successful. it may be that some of the submissions are  superflous and are not actually processed by the application. It might be that data is validated at one stage and then trusted subsequently . In this instance try to provide the credentials  of  one user at one stage and then switch at the next to actually authenticate as a different user.  It might be that the same piece of data is validated at more than one stage, but against different checks. In this instance try to provide (for example) the username and password of one user at the first stage m and the username and PIN of a different user at the second state.\n### 5 - pay close attention to any data transmitted via client that was not directly entered by the user. The aplication may use this data to store information about the state of the login progres, and the application may trust it when it is submitted back to the server for example if the request for stage three includes the parameter STAGE2COMPLETE=true it may be possible to advance straight to stage trhee by setting this value . Try to modify the values being submitted , and determine wheter this enables you toadvance or skip stages\n\n\n","x":10100,"y":-1920,"width":720,"height":1200},
		{"id":"9caa62c0fbc65bed","type":"text","text":"# Fail-Open Login Mechanism","x":8874,"y":-1540,"width":266,"height":120,"color":"1"},
		{"id":"ae4e2e49c21d7445","type":"text","text":"# Defects in Multistage Login Mechanism","x":8874,"y":-1280,"width":258,"height":180,"color":"1"},
		{"id":"897b139fccbdda65","type":"text","text":"###  1- obtain asingle token from the applicatoin and modify it in systematic ways to determine whether the entire tokne is validated or whether some of it's subcomponents are ignored. tye changing the token's  value one byte ata time ( or even one bit at atime ) and resubmiting the modified token to the application to determine whether it is stil acccepted. if you find that certain portions of the token are not actually required to be correct you can exclude these from any further analysis , potentially reducing  the amout of work you need to perform you can use the \"char frobber\" payload type inBurp intruder to modify a token's value in one character position at a time to help with this task.\n\n### 2- analyze te tokens for any detectable encoding or obfuscation. where the username contains a sequence of the same character , look for a correspoding charracter sequence in the token which may indicate the use of xor obfuscation . Look for sequence in the token  containing  only  hexadecimal characters which may indicate  a hex encoding  of an ASCII string or other information. look for sequence tat endin an equals sign and/or  thatn contain only the other valid  base64 characters a to z A to Z to 9+ and /.","x":8980,"y":-960,"width":520,"height":960,"color":"1"},
		{"id":"f5730146c6523fea","type":"text","text":"### 1-Determine when and how session tokens are issued by walking through the application from the first application page throught any login functions two behaviours are common:( 1- the app creates a new session following a successful login 2- the application creates anew session anytime a request is receved that does not submit a token.)\n\n### 2- in burp suite. send the request that creates a new session to burp sequencer and configure the tokens location. then start the live capture to gather as many tokens as is feasible. if a custome session management is in use and you only have remote access to the  application , gather the tokens as quickly as possible to minimize the loss of tokens issued issued to other users and influence of any time dependency.\n\n### 3- while burp sequencer is capturing tokens , enable the auto analyse setting so that burp automatically performs the statistical analysis periodically . collect at least 500 tokens before reviewing the results in any detail \n\n### 4- If the tokens fail the randomness tests and appear to contain patterns that could be exploited to predict future tokens, reperform the exercise from a different IP address and (if relevant) a different username. This will help you identify whether the same pattern is detected and whether tokens received in the first exercise could be extrapolated to identify tokens received in the second. Sometimes the sequence of tokens cap- tured by one user manifests a pattern. But this will not allow straight- forward extrapolation to the tokens issued to other users, because information such as source IP is used as a source of entropy .\n\n\n### 5- If you believe you have enough insight into the token generation algo- rithm to mount an automated attack against other users’ sessions, it is likely that the best means of achieving this is via a customized script. This can generate tokens using the specific patterns you have observed and apply any necessary encoding. \n\n\n\n","x":8940,"y":80,"width":780,"height":1060},
		{"id":"7caeb5e344561b33","type":"text","text":"# meaningful tokens","x":8040,"y":-640,"width":220,"height":100,"color":"1"},
		{"id":"698e87901514aba4","type":"text","text":"# note:\n# consider(lwjVJALs3AjgxpKr+AXleXYg9hyCzAjeFuNgJaZZoA)\n# this is the series of a session token  and with suppoting + we suspect that this is could be base64 but after decodeing this(--Õ$ÍÀŽÆ’«ø^W-bö‚Ì?án6%¦Y)\n# as you can see this is nonprinting characters it means your dealing with binay data rather than ascii text and then rendering the decoded data as hexadecimal numbers give you the following (9708D5242ECDC08EC692ABF85E57762F61C82CC8DE16E3625A659A0)\n# there is still no vissible pattern however, if you subtract each number from the previous one you arrive at the following(FF97C4EB6A7C4EB6A7C4EB6A7C4EB6A7C4EB6A7C4EB6A7C4EB6A)\n# which immediately rebeals the concealed pattern . the algorithm used to generate tokens adds 0x7C4EB6A to the previous value , truncates the result to a 32-bit number and base 64encodes this binary data to allow it to be transported using the text based protocol HTTP .\n","x":8040,"y":-280,"width":700,"height":720},
		{"id":"eb80c60eecab732c","type":"text","text":"# Testing quaility of randomness of a session","x":8260,"y":660,"width":250,"height":120,"color":"5"},
		{"id":"4858f44696fa9217","type":"text","text":"# 1st \n\n### send first request to repeater \n\n# 2nd\n## check if the server is caching normal requests (you can tell this by the response header \"server-Timing: cdn-cache;desc=HIT\")\n\n# 3rd\n## Add an Illegal  Request Header into the requst \n\tlike :\n\tGET /x/xxx/xxxx/ HTTP/2\n\tHost: something \n\t/:\n\tUser-Agent ...\n\t...\n# 4th \n## if the response was successfully cached , when you open the URL in any browser , you should get a 400 Bad Request \n","x":7680,"y":2560,"width":860,"height":820},
		{"id":"445336650071f816","type":"text","text":"# 1st\n\n## create an account\n# 2nd \n## Check if any sensitive information is disclosed in any page (e.g session token)\n# 3rd\n# send the req to the repeater \n## Add a cachable Extension (.js, .css) at the end of the url and see if it gives a 200  OK Response\n\tGET /x/xx/xxx/.js?test HTTP/2\n\t\t...\n# 4th\n## open the modified url using your authenticated account \n\n# 5th \n## Open the Same URL using curl or Private Web Browser\n\tcurl 'https://domain.com/x/xx/xxx/.js?test' --compressed | grep -i 'cookie'\n# 6th \n\n## if the token was successfully cached you should see the token in the response \n\n","x":7680,"y":3540,"width":860,"height":1060},
		{"id":"14ea5f388db15888","type":"text","text":"# Illegal headers won’t work, and now most Cloudflare Customers are using [Cache Deception Armor](https://developers.cloudflare.com/cache/about/cache-deception-armor/)\n\n# I was able to bypass this protection using .avif file which is a really unknown extension file.","x":7680,"y":4880,"width":840,"height":217},
		{"id":"5c1bb783fe139c43","type":"text","text":"# NOTE:\n## Sometimes, if the response is a “404 Not found” Akamai only caches the response for less than 10 seconds, making this harder for the attacker. The attacker needs to be quick in this case, however, if Akamai Detects a 200 Ok Response, the response will last for at least 24 Hours.","x":8765,"y":2641,"width":355,"height":519},
		{"id":"46642b4a0f14bb1a","type":"text","text":"# trick\n## In some Applications, if you add a Semicolon (;) before the extension it may give you a 200 Ok response e.g\n\n# /xxxx/xxxxxx/;.js","x":8821,"y":3681,"width":379,"height":319},
		{"id":"81d56ece2bdae962","type":"text","text":"# Implementation flaws in Authentication","x":7940,"y":-1480,"width":363,"height":120,"color":"1"},
		{"id":"29ca8a7932e4ecea","type":"text","text":"# Attacking Session Management ","x":6500,"y":-400,"width":250,"height":170,"color":"1"},
		{"id":"9e244b423883d129","type":"text","text":"# WEAKNESS in Token generation","x":7220,"y":-280,"width":340,"height":100},
		{"id":"a8daf1b58f36a016","type":"text","text":"# <font color=\"red\">Note: </font>one of the best way to test the effectiveness of an application's access control is to create two different accounts","x":6880,"y":880,"width":510,"height":160},
		{"id":"e2ce985ba7219b31","type":"text","text":"# Attacking Access Controls ","x":6400,"y":1080,"width":340,"height":100,"color":"1"},
		{"id":"6f2ab456b797a3a1","type":"text","text":"# if the application does not have login functionality but it uses Akami CDN these are my steps","x":6565,"y":2920,"width":760,"height":140},
		{"id":"439cad0f07d59e85","type":"text","text":"# Web cache vulnerabilities","x":5900,"y":3080,"width":425,"height":80,"color":"1"},
		{"id":"2081e0afbf6d2b23","type":"text","text":"# if the application does have a login functionality\n","x":6565,"y":3680,"width":760,"height":130},
		{"id":"7212065e4b50995c","type":"text","text":"# if the application using Cloudflare CDN","x":6600,"y":5040,"width":699,"height":57},
		{"id":"de96bdacae43328a","type":"text","text":"# Penetration Testing","x":5262,"y":-3080,"width":300,"height":100,"color":"5"},
		{"id":"d1db0b4412c08858","type":"text","text":"# Bug Bounty","x":5262,"y":-2820,"width":300,"height":100,"color":"1"},
		{"id":"7da8a6ef39da4f6c","type":"text","text":"#        DOMAIN","x":5800,"y":-2940,"width":250,"height":60},
		{"id":"e310b073c8bb3623","type":"text","text":"# Attacking Authentication","x":6500,"y":-2700,"width":282,"height":120,"color":"1"},
		{"id":"1bc80952a453d1dd","type":"text","text":"# crunchbase.com","x":5800,"y":-3840,"width":250,"height":100},
		{"id":"0a7150e5417f40a8","type":"text","text":"# for wordpress using wpscan juse this command for user enumeration\n\n## wpscan --url greencloud.ir -e u vp --api-token [token]","x":4320,"y":-3790,"width":410,"height":330},
		{"id":"8594f4e0a218ef08","type":"text","text":"#    curl -H 'Cache-Control: no-cache, no-store' -L -ik -s https://greencloud.ir | grep -E 'wp-content/plugins/' | sed -E 's,href=|src=,THIIIIS,g' | awk -F \"THIIIIS\" '{print $2}' | cut -d \"'\" -f2\n\n# getting output out of white page s like this (this is just getting the pluggins of a wordpress site)\n\n","x":5141,"y":-3790,"width":543,"height":430},
		{"id":"da5124cf218db89c","type":"text","text":"# info gathering ","x":5800,"y":-3420,"width":250,"height":120},
		{"id":"98c0e2cdcfb8f1e2","type":"text","text":"## certificate","x":8193,"y":-7980,"width":250,"height":60},
		{"id":"c6d878186c4fd8e1","type":"text","text":"# censys","x":7800,"y":-7875,"width":217,"height":60},
		{"id":"d581c242424e7048","type":"text","text":"## shodan.io/domain/${domain}","x":8090,"y":-8480,"width":250,"height":100},
		{"id":"4a2b80618eeb4a6a","type":"text","text":"# ASN","x":8530,"y":-8460,"width":160,"height":60},
		{"id":"f5eb974bc008863f","type":"text","text":"# shodan","x":7800,"y":-8320,"width":183,"height":60},
		{"id":"60e2fe374ed74667","type":"text","text":"# search bar result","x":8090,"y":-8260,"width":250,"height":80},
		{"id":"2fe843fd4fcee199","type":"text","text":"# FingerPrinting \n\nusing wapplyzer, whatweb, webAnalyzer\n\nserver header , forcing occuring Errors, ...\n","x":-6149,"y":-10000,"width":389,"height":236},
		{"id":"f0d8f53c3764bed0","type":"text","text":"# Detecting known vulnerabilities \n\nnce we have the version information of a particular software, such as PHPMyAdmin in our previous example, we can use this information to search for publicly available vulnerabilities or exploits associated with\nPHPMyAdmin 4.8.1. \n\ncommand :\n```\nsearchsploit phpmyadmin -s 4.8.1 -w\n```\n\nIt can also be used to search for a specific CVE. To do so, we will use “--cve” flag followed by the CVE number.\n\n```\nsearchsploit --cve 2021-44444\n```\n\nMITRE’s CVE Database [https://cve.mitre.org/]: Mitre is the primary database for CVEs, maintained by MITRE. It’s a standard reference for publicly disclosed cybersecurity  lnerabilities, widely used by various security tools.\n\nPacketstorm [packetstormsecurity.com]: Packetstorm is known for providing  etailed information about exploits,  ncluding proof-of-concept (POC) examples.\n\nSecurityFocus (Bugtraq)  https://seclists.org/bugtraq]: Although Bugtraq has been shut down, its archives remain a valuable resource for historical exploit data along with POC.\n\nNOTE : another tool is called `cvemap` which is like searchexploit","x":-6149,"y":-9645,"width":389,"height":1165},
		{"id":"6c810bd9fb898f10","type":"text","text":"# nuclei \n```\n\nnuclei \n            # nuclei-template\n            # or for using fuzzing mode we need to use dast switch\n\n            # more usable switches for nuclei :\n                -id \n                -tags\n                -as   # for detecting before testing\n                \n                # fuzzing \n                    nuclei -as -tags rce -target https://example.com\n                    nuclei -dast -target https://example.com   ; for fuzzing \n```\n","x":-8830,"y":-9940,"width":390,"height":631},
		{"id":"16ada470f555bed5","type":"text","text":"# **NTLM Authentication - Info disclosure**\n\nIf the running server asking for authentication is **Windows** or you find a login asking for your **credentials** (and asking for **domain** **name**), you can provoke an **information disclosure**. **Send** the **header**: `“Authorization: NTLM TlRMTVNTUAABAAAAB4IIAAAAAAAAAAAAAAAAAAAAAAA=”` and due to how the **NTLM authentication works**, the server will respond with internal info (IIS version, Windows version...) inside the header \"WWW-Authenticate\". You can **automate** this using the **nmap plugin** \"_http-ntlm-info.nse_\".","x":-9436,"y":-9575,"width":388,"height":532},
		{"id":"e2c360ad32e7ff61","type":"text","text":"## [Hacktricks](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/iis-internet-information-services)\n\n## IIS (sourush dalili)\n\nhttps://github.com/irsdl/IIS-ShortName-Scanner?tab=readme-ov-file\n\nhttps://github.com/bitquark/shortscan\n```\n`java -jar iis_shortname_scanner.jar 2 20 http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/db/`\n```\n\n\n## presentation \nhttps://github.com/irsdl/IIS-ShortName-Scanner/blob/master/presentation/Steelcon-2023-Beyond_Microsoft_IIS_Short_File_Name_Disclosure.pdf\n## original research\nhttps://soroush.me/downloadable/microsoft_iis_tilde_character_vulnerability_feature.pdf","x":-9949,"y":-9624,"width":349,"height":704},
		{"id":"4d9beb0c5d4d8a89","type":"text","text":"# use param miner to find more params \n\n# use google dorks to find params\n\n# do github dork to find params\n\n#  <font color=\"red\">Enumerating Input Parameters</font>:\n\nOnce the endpoints have been identified, the next step would be to determine input parameters associated with that endpoint. Some parameters may be visible in the request, whereas others might be hidden, which may not be\nimmediately visible in the client-side code or documentation tools:\nhttps://github.com/s0md3v/Arjun\n\nAlthough Arjun contains its own default wordlist, however, it does pro vide an option to include a custom wordlist. This custom wordlist can be generated using parameters from various sources, such as WebArchive data,\nenabling the creation of a target-specific wordlist that can yield a higher success rate. Additionally, it’s possible to use the same parameters found on the main domain for testing against subdomains. Let’s examine a potential technique that can be used to generate a custom wordlist for enumerating input parameters.\n\n### Generating custom wordlist for param discovery\n\nWe will use the “GAU” and “Unfurl” tools to generate a custom wordlist. The process involves examining URLs from archives using GAU and then applying Unfurl to extract the components of a URL, such as individual parameters.\n\ncommand :\n\n```\necho tesla.com | gau --subs | grep '=' | unfurl keys |\nsort -u\n```\n\nNext, the “unfurl” tool is used to remove duplicate parameters from the URLs. \n\nthis is the special wordlist for that specific company.\n\n\n\n\n","x":-1080,"y":-8425,"width":974,"height":846},
		{"id":"b38e9de8ae58ef00","type":"text","text":"# Do directory search\n\n# for wordlist:\n\n# seclist\n\n- raft-large-directories-lowercase.txt\n    \n- directory-list-2.3-medium.txt\n    \n- RobotsDisallowed/top10000.txt\n\n# assetNote\n\n\n# carlospolop\nhttps://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/bf_directories.txt\n\n\n## you can replay your request while fuzzing in burp using ffuf 's -x http://localhost:8080 \n\n# use nuclei for finding things:\n```\nnuclei -u https://example.com -t nuclei-templates/exposures/\n```\n\n","x":-3280,"y":-10480,"width":860,"height":760},
		{"id":"5ed2430a49d955ac","type":"text","text":"# github list of google dorks\nhttps://github.com/TakSec/google-dorks-bug-bounty","x":-5280,"y":-9732,"width":250,"height":169},
		{"id":"ee8a7845579d656d","type":"text","text":"# Google Dork s\n\n## for Google docks\n\n\tsite:docs.google.com inurl:\"/d/\" \"example.com\"\n\n## for OneDrive\nMicrosoft’s cloud storage solution for files and photos. Score big by finding internal presentations and private photos that were accidentally made public:\n\n\tsite:onedrive.live.com \"example.com\"\n\n\n## for Dropbox\n\nReveal Dropbox links containing source code, proprietary information, and even customer data\n\n\tsite:dropbox.com/s \"example.com\"\n\n## box \n\nDiscover sensitive files like internal reports and client contracts by searching for Box-hosted files:\n\n\tsite:box.com/s \"example.com\"\n\n## Azure DevOps\n\nMicrosoft's suite of developer services, including repos and pipelines. Uncover critical information like API keys, authentication tokens, and unsecured repositories by dorking Azure DevOps:\n\n\tsite:dev.azure.com \"example.com\"\n\n## Share point\n\nFind treasure troves of internal communications, project plans, and employee records,\n\n\tsite:http://sharepoint.com \"example.com\"\n\n## DigitalOcean spaces\n\nObject storage for developers to store and serve large amounts of data. Unearth juicy files like database backups, configuration files, and logs stored on DigitalOcean Spaces:\n\n\tsite:digitaloceanspaces.com \"example.com\"\n\n## FireBase\n\nGoogle's mobile and web app development platform. Reveal app secrets, user data, and even private API endpoints by searching Firebase-hosted files:\n\n\tsite:firebaseio.com \"example\"\n\n## Jfrog\nA platform for managing and distributing software artifacts. Jump on JFrog to discover exposed artifacts, builds, and release packages that could lead to serious security risks:\n\n\tsite:jfrog.io \"example\"\n\n## Lesser-known Amazon S3 subdomains\n\n\tsite:http://s3-external-1.amazonaws.com \"example.com\"\n\tsite:http://s3.dualstack.us-east-1.amazonaws.com \"example.com\"","x":-5020,"y":-9732,"width":599,"height":2082},
		{"id":"a9c7a95c84b93479","type":"text","text":"## PHP extension parameters\n\n\tsite:tesla.com ext:php inurl:?\n\n## combine Dorks\n\n\t(site:tesla.com | site:teslamotors.com) & \"choose file\"\n","x":-5640,"y":-9732,"width":300,"height":398},
		{"id":"853bac71e3364e42","type":"text","text":"Try other search engines like [DuckDuckGo](https://duckduckgo.com/), [Bing](https://www.bing.com/), [Baidu](https://www.baidu.com/), and [Dogpile](https://www.dogpile.com/) to further expand your findings.","x":-5280,"y":-9473,"width":250,"height":139},
		{"id":"9d47609aa80cf937","type":"text","text":"# dorks \n### change the domains in the list below and  use the site : urlopener to open all these at once\n\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:env&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:yml&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:sql&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:zip&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:json&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:txt&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:pwd&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:old&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:bak&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:bakup&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:conf&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:config&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:java&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:xml&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:log&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:pdf&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:ora&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:xsd&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:xls&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:xlsx&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:reg&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:pem&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:passwd&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:ini&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:docx&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:gz&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+filetype:csv&filter=0\nhttps://www.google.com/search?q=site:wuedata.water.ca.gov+intitle:\"index of\"&filter=0","x":-4360,"y":-9732,"width":585,"height":1532},
		{"id":"9ebaaa92129dae67","type":"text","text":"####  in every response with sensitive data you can test for \n1- CORS\n2- JSONP(xss inclusion)\n3- POSTMESSAGE","x":274,"y":-8425,"width":486,"height":165},
		{"id":"671715186033c629","type":"text","text":"## Based on identified IP blocks it is possible to query for specific files .\n\n#### for example:\n\n\tfor ipa in 98.13.{6..9}.{0..255}.{0..255}; do\n\twget -t 1 -T 5 http://${ipa}/phpinfo.php; done &\n","x":-3665,"y":-18440,"width":250,"height":464},
		{"id":"3c5096042b5b8d51","type":"text","text":"## Get IP ranges using asnmap(project discovery)\n\n","x":-3800,"y":-17900,"width":480,"height":120},
		{"id":"513f1e22888e7950","type":"text","text":"# nuclei fuzzer for finding injections\n\n```\nnf -f katana.crawl \n```\n\n\n- [ ] https://github.com/0xKayala/NucleiFuzzer/blob/main/NucleiFuzzer.sh\n","x":730,"y":-8756,"width":380,"height":258},
		{"id":"ed94ad13ebbc2862","x":720,"y":-9218,"width":450,"height":280,"type":"text","text":"# for getting rid of similar url paths \n\n## use this tool\n```\nuddup --help\n```"}
	],
	"edges":[
		{"id":"d07cd314c775af3d","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"f5eb974bc008863f","toSide":"left"},
		{"id":"2b5c3bc7b81b41cc","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"c6d878186c4fd8e1","toSide":"left"},
		{"id":"332d035d0fce1c1e","fromNode":"c6d878186c4fd8e1","fromSide":"right","toNode":"98c0e2cdcfb8f1e2","toSide":"left"},
		{"id":"c891837e6078cc4a","fromNode":"c6d878186c4fd8e1","fromSide":"right","toNode":"a1a9e7314e06f098","toSide":"left"},
		{"id":"90df0e43ed081a9f","fromNode":"f5eb974bc008863f","fromSide":"right","toNode":"60e2fe374ed74667","toSide":"left"},
		{"id":"9702a4cf85d3755a","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"5ba2826c6199690d","toSide":"left"},
		{"id":"6a36f8434cc50ed0","fromNode":"5ba2826c6199690d","fromSide":"right","toNode":"13e9d0526061b658","toSide":"left"},
		{"id":"e5b9d4d9f6a6605e","fromNode":"5ba2826c6199690d","fromSide":"right","toNode":"e5d8bb6b8908eddd","toSide":"left"},
		{"id":"92004a836916af04","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"6b363b761a9a70fe","toSide":"left"},
		{"id":"080b6ac46c285ef7","fromNode":"6b363b761a9a70fe","fromSide":"right","toNode":"ae63b4746fadd54f","toSide":"left"},
		{"id":"7cc89d2f3acee13e","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"7c6ea01e6fb7358c","toSide":"left"},
		{"id":"f5ad7552a90ca372","fromNode":"7c6ea01e6fb7358c","fromSide":"right","toNode":"acaec07463c2af85","toSide":"left"},
		{"id":"7a5c6c3337475ad2","fromNode":"acaec07463c2af85","fromSide":"right","toNode":"7c6ea01e6fb7358c","toSide":"top"},
		{"id":"cbeabd8e5abd7fd8","fromNode":"ae63b4746fadd54f","fromSide":"right","toNode":"6258375a3a053e7c","toSide":"left"},
		{"id":"8006f31d5440125b","fromNode":"6258375a3a053e7c","fromSide":"right","toNode":"e42c499a9cb1372e","toSide":"left"},
		{"id":"f66669eb9fd8d86a","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"7888eaa42431879b","toSide":"left"},
		{"id":"10ecf501956a2ff6","fromNode":"7888eaa42431879b","fromSide":"right","toNode":"11beddbe8b36a70a","toSide":"left"},
		{"id":"60028b654793e456","fromNode":"7888eaa42431879b","fromSide":"right","toNode":"3b19da9a7655768f","toSide":"left"},
		{"id":"faa6cfc4d88c9063","fromNode":"7888eaa42431879b","fromSide":"right","toNode":"de57ecc3ada6f03d","toSide":"left"},
		{"id":"c7bee85d3b7d9fd9","fromNode":"f5eb974bc008863f","fromSide":"right","toNode":"d581c242424e7048","toSide":"left"},
		{"id":"ca0dce5a267be9d4","fromNode":"7da8a6ef39da4f6c","fromSide":"top","toNode":"da5124cf218db89c","toSide":"bottom"},
		{"id":"03e9b7a28be9c4f0","fromNode":"da5124cf218db89c","fromSide":"top","toNode":"1bc80952a453d1dd","toSide":"bottom"},
		{"id":"4f7c7dcef2cab861","fromNode":"a2ee21cdf35aba0f","fromSide":"right","toNode":"481ca1dd4d262f59","toSide":"left"},
		{"id":"2caad067fc62f247","fromNode":"a2ee21cdf35aba0f","fromSide":"right","toNode":"4639dac037dc7df9","toSide":"left"},
		{"id":"1c3a81d34bc6099f","fromNode":"4639dac037dc7df9","fromSide":"right","toNode":"5749c3ca3d7dfa57","toSide":"left"},
		{"id":"e0e390d820acd190","fromNode":"481ca1dd4d262f59","fromSide":"right","toNode":"ee7facb9826b5185","toSide":"left"},
		{"id":"a6ff7979f9070a46","fromNode":"d581c242424e7048","fromSide":"right","toNode":"4a2b80618eeb4a6a","toSide":"left"},
		{"id":"2f639a0fe771211f","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"a2ee21cdf35aba0f","toSide":"left"},
		{"id":"cb9defcf9877f398","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"e310b073c8bb3623","toSide":"left"},
		{"id":"0e4ab4ccc2b9b170","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"e72cd61c14e34a40","toSide":"left"},
		{"id":"a7d032017fbb9f63","fromNode":"e72cd61c14e34a40","fromSide":"right","toNode":"bdbecd6fdb5af2c7","toSide":"left"},
		{"id":"7c4cf606c5cfe793","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"c84d03ebcb09b908","toSide":"left"},
		{"id":"31b1601fe92714d7","fromNode":"c84d03ebcb09b908","fromSide":"right","toNode":"6b80fa0a75b5fb6e","toSide":"left"},
		{"id":"84a58cf3ab2fd965","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"cee15b252134ec38","toSide":"left"},
		{"id":"e9a1af3a526d55b0","fromNode":"cee15b252134ec38","fromSide":"right","toNode":"a367e3e324333acd","toSide":"left"},
		{"id":"997c39d7b2b10fb1","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"53b4e1fb8ce1ebc1","toSide":"left"},
		{"id":"56519f063c90c411","fromNode":"53b4e1fb8ce1ebc1","fromSide":"right","toNode":"25e9393d25040efd","toSide":"left"},
		{"id":"ddaed7975ad0da50","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"e9cf98dec3489df4","toSide":"left"},
		{"id":"c7c4033fb958494b","fromNode":"e9cf98dec3489df4","fromSide":"right","toNode":"d882c3959c05c833","toSide":"left"},
		{"id":"9dfbf594b9c3ee3f","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"2a743bae1900ba58","toSide":"left"},
		{"id":"4d81fc560d34f228","fromNode":"2a743bae1900ba58","fromSide":"right","toNode":"acf6c7c79fbfd867","toSide":"left"},
		{"id":"dfc75405b2c7c431","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"398c7069fbccf8e9","toSide":"left"},
		{"id":"fe32ad6c84aba5b9","fromNode":"398c7069fbccf8e9","fromSide":"right","toNode":"85f59185c71c411d","toSide":"left"},
		{"id":"3a0f238f99589c83","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"beb8f3679303e91c","toSide":"left"},
		{"id":"85eca894fb96d000","fromNode":"beb8f3679303e91c","fromSide":"right","toNode":"2fe8ca2ab9e8ff1c","toSide":"left"},
		{"id":"822f2586077232b2","fromNode":"2fe8ca2ab9e8ff1c","fromSide":"right","toNode":"eb64526fa088a9f6","toSide":"left"},
		{"id":"18dd145a7e9aa79a","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"0d1b4f5e92284c7f","toSide":"left"},
		{"id":"55a4d157afec7317","fromNode":"0d1b4f5e92284c7f","fromSide":"right","toNode":"4df59f52b9c00c20","toSide":"left"},
		{"id":"a0ef6b6621bd5764","fromNode":"e310b073c8bb3623","fromSide":"right","toNode":"81d56ece2bdae962","toSide":"left"},
		{"id":"9cea249f8a9c1559","fromNode":"81d56ece2bdae962","fromSide":"right","toNode":"9caa62c0fbc65bed","toSide":"left"},
		{"id":"5d606bb6744adcfc","fromNode":"9caa62c0fbc65bed","fromSide":"right","toNode":"9d0f31a1a1532db1","toSide":"left"},
		{"id":"bc9d4b243a229690","fromNode":"81d56ece2bdae962","fromSide":"right","toNode":"ae4e2e49c21d7445","toSide":"left"},
		{"id":"8f351c7fdad81ddb","fromNode":"ae4e2e49c21d7445","fromSide":"right","toNode":"0986e7ab2dd06397","toSide":"left"},
		{"id":"de0e1c97269432a0","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"29ca8a7932e4ecea","toSide":"left"},
		{"id":"2179e55e6df82b5a","fromNode":"29ca8a7932e4ecea","fromSide":"right","toNode":"9e244b423883d129","toSide":"left"},
		{"id":"f64ab33e726e5e88","fromNode":"9e244b423883d129","fromSide":"right","toNode":"7caeb5e344561b33","toSide":"left"},
		{"id":"00ff2d646969e746","fromNode":"7caeb5e344561b33","fromSide":"right","toNode":"897b139fccbdda65","toSide":"left"},
		{"id":"b56fb5cf815aeedb","fromNode":"9e244b423883d129","fromSide":"right","toNode":"698e87901514aba4","toSide":"left"},
		{"id":"919a0ec3a3ee81e6","fromNode":"9e244b423883d129","fromSide":"right","toNode":"eb80c60eecab732c","toSide":"left"},
		{"id":"e54d0db067b44a3f","fromNode":"eb80c60eecab732c","fromSide":"right","toNode":"f5730146c6523fea","toSide":"left"},
		{"id":"4aa6b0a8d94a2d25","fromNode":"7da8a6ef39da4f6c","fromSide":"right","toNode":"e2ce985ba7219b31","toSide":"left"},
		{"id":"0b47bed19b032c28","fromNode":"bc7757522aabc15f","fromSide":"left","toNode":"5ef79ec8c9413b94","toSide":"left"},
		{"id":"7b0b52716afa9bbd","fromNode":"5ef79ec8c9413b94","fromSide":"left","toNode":"497a694f2e423e3c","toSide":"left"},
		{"id":"e1e5223d4ccb5ddb","fromNode":"497a694f2e423e3c","fromSide":"right","toNode":"b0d8a465113ebf8f","toSide":"left"},
		{"id":"4f44c253abf66bb5","fromNode":"b0d8a465113ebf8f","fromSide":"left","toNode":"1b3888f15c9ca06f","toSide":"left"},
		{"id":"35f9a306084bb19d","fromNode":"1b3888f15c9ca06f","fromSide":"right","toNode":"e053461f8d333244","toSide":"left"},
		{"id":"3c004d685446c80c","fromNode":"e053461f8d333244","fromSide":"left","toNode":"8399f189129bea5f","toSide":"left"},
		{"id":"67892e3bcb2e769b","fromNode":"8399f189129bea5f","fromSide":"left","toNode":"f964c569499f3a6a","toSide":"left"},
		{"id":"0fcdbbe796fd340d","fromNode":"f964c569499f3a6a","fromSide":"right","toNode":"3d66c65402b90c56","toSide":"left"},
		{"id":"4326e90020f42875","fromNode":"3d66c65402b90c56","fromSide":"left","toNode":"4f81bce4d66c9e40","toSide":"left"},
		{"id":"5d45cc5df27cda4d","fromNode":"b0d8a465113ebf8f","fromSide":"bottom","toNode":"9e39896ca7ac4828","toSide":"top"},
		{"id":"9d88aa19d0fa566d","fromNode":"9e39896ca7ac4828","fromSide":"bottom","toNode":"cd4fe80d8ce478eb","toSide":"top"},
		{"id":"1ab3492b5fcfbe2b","fromNode":"6f2ab456b797a3a1","fromSide":"right","toNode":"4858f44696fa9217","toSide":"left"},
		{"id":"51fe71ebf76082f6","fromNode":"2081e0afbf6d2b23","fromSide":"right","toNode":"445336650071f816","toSide":"left"},
		{"id":"c360bd5ad0678a6e","fromNode":"4858f44696fa9217","fromSide":"right","toNode":"5c1bb783fe139c43","toSide":"left"},
		{"id":"9210bfbd9a5f2404","fromNode":"5c1bb783fe139c43","fromSide":"bottom","toNode":"46642b4a0f14bb1a","toSide":"top"},
		{"id":"b0e2724c0fb8d3a8","fromNode":"b0d8a465113ebf8f","fromSide":"bottom","toNode":"acf71aee5650f74a","toSide":"top"},
		{"id":"00c403522cd8a189","fromNode":"acf71aee5650f74a","fromSide":"bottom","toNode":"64b941c60cfccc21","toSide":"top"},
		{"id":"8bc4cff5c45ba92d","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"1d6a9de5c8e58fab","toSide":"top"},
		{"id":"306da1a41ae1012d","fromNode":"8399f189129bea5f","fromSide":"bottom","toNode":"23a56b0557f9e6e5","toSide":"top"},
		{"id":"897096d7ac47c6ee","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"b38e9de8ae58ef00","toSide":"top"},
		{"id":"a14ac36665d10ed4","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"deabcfe579a25509","toSide":"top"},
		{"id":"59533e911149faa5","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"3471cc29f0a4e7ea","toSide":"top"},
		{"id":"29422028f55e92c7","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"be2acbb8af2e8739","toSide":"top"},
		{"id":"1f3f24611c962177","fromNode":"be2acbb8af2e8739","fromSide":"bottom","toNode":"b05958fff303dd8a","toSide":"top"},
		{"id":"f7fead3fbb118263","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"ad55a66826b1e1f1","toSide":"top"},
		{"id":"d0f7d9e3d3201fb8","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"281bdb76645a74a6","toSide":"right"},
		{"id":"630d65f3bf84725a","fromNode":"b38e9de8ae58ef00","fromSide":"bottom","toNode":"aca99a38e89e74ae","toSide":"top"},
		{"id":"56dcfd69a1b7acab","fromNode":"b38e9de8ae58ef00","fromSide":"bottom","toNode":"9888c88bf4694e48","toSide":"top"},
		{"id":"dd037485eb073a39","fromNode":"3a1de0661cdec286","fromSide":"bottom","toNode":"16ada470f555bed5","toSide":"top"},
		{"id":"c181fd18c942b071","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"3a1de0661cdec286","toSide":"top"},
		{"id":"195c688394746b83","fromNode":"c5f38e86451278b3","fromSide":"right","toNode":"aa9bc323f062e7b3","toSide":"left"},
		{"id":"fb5f3e37356e77d8","fromNode":"aa9bc323f062e7b3","fromSide":"right","toNode":"350f25ee0525c239","toSide":"left"},
		{"id":"dd3470f7c3bafefc","fromNode":"c5f38e86451278b3","fromSide":"right","toNode":"4dcd57b5b9845150","toSide":"left"},
		{"id":"d17603c991cc772b","fromNode":"3471cc29f0a4e7ea","fromSide":"bottom","toNode":"ee8a7845579d656d","toSide":"top"},
		{"id":"b65c3bae49acd83d","fromNode":"3471cc29f0a4e7ea","fromSide":"bottom","toNode":"5ed2430a49d955ac","toSide":"top"},
		{"id":"2384571164e5ded7","fromNode":"3471cc29f0a4e7ea","fromSide":"bottom","toNode":"a9c7a95c84b93479","toSide":"top"},
		{"id":"f32528bc17ab57d0","fromNode":"5ed2430a49d955ac","fromSide":"bottom","toNode":"853bac71e3364e42","toSide":"top"},
		{"id":"668c37da9c0aaccb","fromNode":"aa725dce9339b51f","fromSide":"left","toNode":"671715186033c629","toSide":"right"},
		{"id":"358fb2648281e025","fromNode":"aa725dce9339b51f","fromSide":"left","toNode":"8a82842c575cab7b","toSide":"left"},
		{"id":"7d65ee6875d076c1","fromNode":"8de0b860308f246b","fromSide":"right","toNode":"8a82842c575cab7b","toSide":"left"},
		{"id":"9071d505dc12b2ea","fromNode":"8a82842c575cab7b","fromSide":"left","toNode":"e6492365862d97ee","toSide":"left"},
		{"id":"dd6f72d8bdcd18d0","fromNode":"e6492365862d97ee","fromSide":"left","toNode":"322be645ddefdad0","toSide":"left"},
		{"id":"fddbb642f8067f0b","fromNode":"322be645ddefdad0","fromSide":"left","toNode":"4654099419fe1553","toSide":"left"},
		{"id":"206864837a845697","fromNode":"1d6a9de5c8e58fab","fromSide":"bottom","toNode":"8cf840fde6c71503","toSide":"top"},
		{"id":"1476f8b27d33acb0","fromNode":"1d6a9de5c8e58fab","fromSide":"bottom","toNode":"4d9beb0c5d4d8a89","toSide":"top"},
		{"id":"3a1e078b0dcc5b9d","fromNode":"2fe843fd4fcee199","fromSide":"bottom","toNode":"f0d8f53c3764bed0","toSide":"top"},
		{"id":"06b0aafedbc0f2b9","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"2fe843fd4fcee199","toSide":"top"},
		{"id":"264b453f5f2cfb5e","fromNode":"64b941c60cfccc21","fromSide":"bottom","toNode":"6c810bd9fb898f10","toSide":"top"},
		{"id":"7ee51554e2fc7208","fromNode":"3a1de0661cdec286","fromSide":"bottom","toNode":"e2c360ad32e7ff61","toSide":"top"},
		{"id":"7ae38d67908088dc","fromNode":"1d6a9de5c8e58fab","fromSide":"bottom","toNode":"ed94ad13ebbc2862","toSide":"top"},
		{"id":"5454a826b8d0934b","fromNode":"3471cc29f0a4e7ea","fromSide":"bottom","toNode":"9d47609aa80cf937","toSide":"top"},
		{"id":"2ed5b2ea00e8a350","fromNode":"1d6a9de5c8e58fab","fromSide":"bottom","toNode":"9ebaaa92129dae67","toSide":"top"},
		{"id":"4f015bd9df1731fc","fromNode":"aa725dce9339b51f","fromSide":"left","toNode":"3c5096042b5b8d51","toSide":"right"},
		{"id":"342df7db6583d413","fromNode":"ed94ad13ebbc2862","fromSide":"bottom","toNode":"513f1e22888e7950","toSide":"top"}
	]
}